"""
HSV Calibrator Tool for Color Tracking (OpenCV-based)

This script opens a video stream (e.g., webcam) and provides interactive HSV sliders to help the user
fine-tune the HSV range needed to segment a specific color. It displays:

- The original frame
- The binary mask generated by the HSV threshold
- The filtered result after applying the mask

When the user presses the 's' key, the currently selected HSV range is saved to a JSON config file
(`hsv_config.json`) for use in computer vision applications such as object tracking.

Author: [Qiyue Chen]
Date: [2025-06-30]
"""

import cv2
import numpy as np
import json

def nothing(x):
    """
    Dummy callback function required by OpenCV's trackbar creation.
    OpenCV requires a function to be passed in when creating trackbars.
    """
    pass

# Initialize video capture (0 = default webcam, replace with Tello stream if needed)
cap = cv2.VideoCapture(0)

# Create a window to hold the HSV sliders (trackbars)
cv2.namedWindow("Trackbars")

# Create trackbars for adjusting HSV range dynamically
cv2.createTrackbar("H Low", "Trackbars", 40, 179, nothing)
cv2.createTrackbar("S Low", "Trackbars", 70, 255, nothing)
cv2.createTrackbar("V Low", "Trackbars", 70, 255, nothing)
cv2.createTrackbar("H High", "Trackbars", 80, 179, nothing)
cv2.createTrackbar("S High", "Trackbars", 255, 255, nothing)
cv2.createTrackbar("V High", "Trackbars", 255, 255, nothing)

# Main loop to read frames and apply HSV thresholding
while True:
    ret, frame = cap.read()
    if not ret:
        break  # Exit loop if frame not captured successfully

    # Convert BGR (default OpenCV format) to HSV for color thresholding
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # Read HSV values from the trackbars
    hL = cv2.getTrackbarPos("H Low", "Trackbars")
    sL = cv2.getTrackbarPos("S Low", "Trackbars")
    vL = cv2.getTrackbarPos("V Low", "Trackbars")
    hH = cv2.getTrackbarPos("H High", "Trackbars")
    sH = cv2.getTrackbarPos("S High", "Trackbars")
    vH = cv2.getTrackbarPos("V High", "Trackbars")

    # Construct lower and upper HSV boundaries
    lower = np.array([hL, sL, vL])
    upper = np.array([hH, sH, vH])

    # Create binary mask using the selected HSV range
    mask = cv2.inRange(hsv, lower, upper)

    # Apply mask to original frame to extract only selected color
    result = cv2.bitwise_and(frame, frame, mask=mask)

    # Display the binary mask, filtered image, and original frame
    cv2.imshow("Mask", mask)
    cv2.imshow("Filtered", result)
    cv2.imshow("Original", frame)

    # Handle keyboard input
    key = cv2.waitKey(1) & 0xFF
    if key == ord('s'):
        # Save the current HSV range to a JSON config file
        with open("hsv_config.json", "w") as f:
            json.dump({"lower": lower.tolist(), "upper": upper.tolist()}, f)
        print("HSV range saved.")
    elif key == ord('q'):
        # Quit the calibration tool
        break

# Cleanup: release camera and close OpenCV windows
cap.release()
cv2.destroyAllWindows()
